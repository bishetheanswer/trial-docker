service: trial-docker

frameworkVersion: '3'

custom:
  labroleArn: arn:aws:iam::${aws:accountId}:role/Administrator

provider:
  name: aws
  runtime: python3.9
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      get-books-biblioteca-nacional:
        path: lambda/get-books-biblioteca-nacional/
      get-books-itbooks:
        path: lambda/get-books-itbooks/
      get-books-nytimes:
        path: lambda/get-books-nytimes/
      clean-books-biblioteca:
        path: lambda/clean-books-biblioteca/
      insert-book:
        path: lambda/insert-book/
      update-table:
        path: lambda/update-table/

functions:
  get-books-biblioteca-nacional:
    # handler: lambda/get_books_itbooks.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: ${self:resources.Resources.S3Bucket.Properties.BucketName} # No puedo usar boto3 con el arn { "Fn::GetAtt": [S3Bucket, DomainName] } 
      DYNAMO_TABLE: "${self:resources.Resources.DynamoTable.Properties.TableName}"
    image:
      name: get-books-biblioteca-nacional

  get-books-itbooks:
    # handler: lambda/get_books_itbooks.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: ${self:resources.Resources.S3Bucket.Properties.BucketName} # No puedo usar boto3 con el arn { "Fn::GetAtt": [S3Bucket, DomainName] } 
      DYNAMO_TABLE: "${self:resources.Resources.DynamoTable.Properties.TableName}"
    image:
      name: get-books-itbooks

  get-books-nytimes:
    # handler: lambda/get_books_nytimes.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: ${self:resources.Resources.S3Bucket.Properties.BucketName} # No puedo usar boto3 con el arn { "Fn::GetAtt": [S3Bucket, DomainName] } 
      DYNAMO_TABLE: ${self:resources.Resources.DynamoTable.Properties.TableName}
      SSM_PARAM: /nytimes/api/key
    image:
      name: get-books-nytimes

  clean-books-biblioteca:
    # handler: lambda/get_books_itbooks.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: ${self:resources.Resources.S3Bucket.Properties.BucketName} # No puedo usar boto3 con el arn { "Fn::GetAtt": [S3Bucket, DomainName] } 
      DYNAMO_TABLE: "${self:resources.Resources.DynamoTable.Properties.TableName}"
    image:
      name: clean-books-biblioteca

  insert-book:
    # handler: lambda/get_books_nytimes.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: ${self:resources.Resources.S3Bucket.Properties.BucketName}
      DYNAMO_TABLE: ${self:resources.Resources.DynamoTable.Properties.TableName}
    image:
      name: insert-book

  update-table:
    # handler: lambda/get_books_nytimes.handler
    timeout: 900
    role: ${self:custom.labroleArn}
    environment:
      S3_BUCKET: { "Fn::GetAtt": [S3Bucket, Arn] }
      DYNAMO_TABLE: ${self:resources.Resources.MetadataTable.Properties.TableName}
    image:
      name: update-table
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoTable, StreamArn]
          batchSize: 5
          batchWindow: 10
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: authors-and-books

    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: authors
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: KEYS_ONLY
        AttributeDefinitions:
          - AttributeName: isbn13
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - KeyType: HASH
            AttributeName: author
          - KeyType: RANGE
            AttributeName: title
        GlobalSecondaryIndexes:
        - IndexName: Isbn13Index
          KeySchema:
            - AttributeName: isbn13
              KeyType: HASH
          Projection:
            ProjectionType: 'ALL'

    MetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: metadata-authors
        BillingMode: PAY_PER_REQUEST
        # StreamSpecification:
        #   StreamViewType: KEYS_ONLY
        AttributeDefinitions:
        #   - AttributeName: isbn13
        #     AttributeType: S
          - AttributeName: author
            AttributeType: S
 #         - AttributeName: n_books
 #           AttributeType: N
        KeySchema:
          - KeyType: HASH
            AttributeName: author
#          - KeyType: RANGE
#            AttributeName: n_books
#        LocalSecondaryIndexes:
#        - IndexName: nBooksIndex
#          KeySchema:
#            - AttributeName: author
#              KeyType: HASH
#            - AttributeName: n_books
#              KeyType: RANGE
#          Projection:
#            ProjectionType: 'KEYS_ONLY'
        # GlobalSecondaryIndexes:
        # - IndexName: Isbn13Index
        #   KeySchema:
        #     - AttributeName: isbn13
        #       KeyType: HASH
#           Projection:
#             ProjectionType: 'ALL'







#           - AttributeName: name
#             AttributeType: S
#         KeySchema:
#           - AttributeName: name
#             KeyType: HASH
#             AttributeName: "isbn13"
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1


#           {
#   "TableName": "authors",
#   "KeySchema": [
#     {
#       "KeyType": "HASH",
#       "AttributeName": "isbn13"
#     },
#     {
#       "KeyType": "RANGE",
#       "AttributeName": "author"
#     }
#   ],
#   "AttributeDefinitions": [
#     {
#       "AttributeName": "isbn13",
#       "AttributeType": "S"
#     },
#     {
#       "AttributeName": "author",
#       "AttributeType": "S"
#     }
#   ],
#   "BillingMode": "PAY_PER_REQUEST"
# }
